name: Protocol & Docs CI

on:
  push:
    branches: ['**']
    tags: ['*.*.*']

env:
  PUBLISH_DIR: docs

jobs:
  build-openapi:
    runs-on: ubuntu-latest
    outputs:
      ref_slug: ${{ steps.slug.outputs.ref }}
      raw_ref: ${{ steps.slug.outputs.raw }}
      doc_path: ${{ steps.slug.outputs.path }}

    steps:
      - uses: actions/checkout@v4

      - name: Normalize branch/tag name
        id: slug
        run: |
          RAW_REF=${GITHUB_REF##*/}
          SAFE_REF=$(echo "${RAW_REF}" | sed 's/\//-/g')
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "path=release/${SAFE_REF}" >> $GITHUB_OUTPUT
          else
            echo "path=branch/${SAFE_REF}" >> $GITHUB_OUTPUT
          fi
          echo "ref_slug=${SAFE_REF}" >> $GITHUB_OUTPUT
          echo "raw_ref=${RAW_REF}" >> $GITHUB_OUTPUT

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libldap-dev libsasl2-dev

      - name: Cache python + node + poetry + npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.local/pipx
            ~/.local/bin/poetry
            node_modules
          key: ${{ runner.os }}-ci-env-${{ hashFiles('poetry.lock', 'package-lock.json') }}

      - name: Setup Python + pipx + poetry
        run: |
          pip install pipx
          pipx ensurepath
          pipx install poetry
          pipx inject poetry poetry-plugin-export
          poetry install --no-interaction

      - name: Setup Node.js + Redocly
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - run: npm i -D @redocly/cli

      - name: Generate OpenAPI & Docs
        run: |
          poetry run python manage.py openapi > ${PUBLISH_DIR}/openapi.yaml
          npx @redocly/cli build-docs -o ${PUBLISH_DIR}/index.html ${PUBLISH_DIR}/openapi.yaml

      - name: Prepare deployment folder structure
        run: |
          mkdir -p publish/${{ steps.slug.outputs.path }}
          cp -r ${PUBLISH_DIR}/* publish/${{ steps.slug.outputs.path }}/

      - name: Generate Docs Index page
        run: bash .github/scripts/generate-index.sh

      - name: Upload OpenAPI.yaml artifact for sync-protocol
        uses: actions/upload-artifact@v4
        with:
          name: openapi-artifact
          path: ${PUBLISH_DIR}/openapi.yaml

      - name: Upload docs artifact for Pages step
        uses: actions/upload-artifact@v4
        with:
          name: docs-publish-artifact
          path: ${PUBLISH_DIR}/*

  deploy-pages:
    needs: build-openapi
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs-publish-artifact
          path: ./publish/

      - name: Restructure folders for Pages deployment
        run: |
          mkdir -p ./publish/${{ needs.build-openapi.outputs.doc_path }}
          mv ./publish/index.html ./publish/${{ needs.build-openapi.outputs.doc_path }}/index.html
          mv ./publish/openapi.yaml ./publish/${{ needs.build-openapi.outputs.doc_path }}/openapi.yaml

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          path: ./publish/

  sync-protocol:
    needs: build-openapi
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Protocol Repo
        uses: actions/checkout@v4
        with:
          repository: EvilFlowersCatalog/evilflowers-protocol
          ref: ${{ needs.build-openapi.outputs.raw_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: protocol_repo

      - name: Download OpenAPI artifact
        uses: actions/download-artifact@v4
        with:
          name: openapi-artifact
          path: openapi/

      - name: Push to Protocol Repo
        run: |
          cd protocol_repo
          mkdir -p openapi metadata
          cp ../openapi/openapi.yaml openapi/openapi.yaml
          echo "${{ needs.build-openapi.outputs.raw_ref }}" > metadata/version.txt
          git config user.name "ci-bot"
          git config user.email "ci@evilflowers.org"
          git add .
          git commit -m "Sync OpenAPI for ${{ needs.build-openapi.outputs.raw_ref }}"
          git push origin ${{ needs.build-openapi.outputs.raw_ref }}
