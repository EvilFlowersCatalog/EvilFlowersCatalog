name: Docker build

on:
  push:
    branches: [ master, develop ]
    # Publish semver tags as releases.
    tags: [ '*.*.*' ]
  pull_request:
    branches: [ develop ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]

    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Install poetry
        run: |
          sudo apt install -y pipx
          pipx ensurepath
          pipx install poetry
          pipx inject poetry poetry-plugin-export

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create requirements.txt
        run: |
          poetry export -f requirements.txt --without-hashes --output requirements.txt --with s3 --with pdf --with apm --with docker

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.ref_name }}
          restore-keys: |
            buildx-

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: push
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Attest
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: dev.evilflowers.elvira.stuba.sk
    steps:
      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Add SSH server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SSH_SERVER }} >> ~/.ssh/known_hosts

      - name: Restart evilflowers-dev.service on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_SERVER }} "sudo systemctl restart evilflowers-dev.service"
